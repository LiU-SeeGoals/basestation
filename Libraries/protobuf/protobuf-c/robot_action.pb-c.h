/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: robot_action.proto */

#ifndef PROTOBUF_C_robot_5faction_2eproto__INCLUDED
#define PROTOBUF_C_robot_5faction_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Action__Command Action__Command;
typedef struct Action__Vector3D Action__Vector3D;
typedef struct Action__Vector2D Action__Vector2D;


/* --- enums --- */

/*
 * Enum for different types of actions
 */
typedef enum _Action__ActionType {
  ACTION__ACTION_TYPE__STOP_ACTION = 0,
  ACTION__ACTION_TYPE__KICK_ACTION = 1,
  ACTION__ACTION_TYPE__MOVE_ACTION = 2,
  ACTION__ACTION_TYPE__INIT_ACTION = 3,
  ACTION__ACTION_TYPE__SET_NAVIGATION_DIRECTION_ACTION = 4,
  ACTION__ACTION_TYPE__ROTATE_ACTION = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACTION__ACTION_TYPE)
} Action__ActionType;

/* --- messages --- */

struct  Action__Command
{
  ProtobufCMessage base;
  Action__ActionType command_id;
  int32_t robot_id;
  int32_t kick_speed;
  Action__Vector3D *pos;
  Action__Vector3D *dest;
  Action__Vector2D *direction;
  /*
   * Negative value rotates robot clockwise
   */
  int32_t angular_vel;
};
#define ACTION__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&action__command__descriptor) \
    , ACTION__ACTION_TYPE__STOP_ACTION, 0, 0, NULL, NULL, NULL, 0 }


/*
 * Structure for 3D vector
 */
struct  Action__Vector3D
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  float w;
};
#define ACTION__VECTOR3_D__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&action__vector3_d__descriptor) \
    , 0, 0, 0 }


/*
 * Structure for 2D vector
 */
struct  Action__Vector2D
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
};
#define ACTION__VECTOR2_D__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&action__vector2_d__descriptor) \
    , 0, 0 }


/* Action__Command methods */
void   action__command__init
                     (Action__Command         *message);
size_t action__command__get_packed_size
                     (const Action__Command   *message);
size_t action__command__pack
                     (const Action__Command   *message,
                      uint8_t             *out);
size_t action__command__pack_to_buffer
                     (const Action__Command   *message,
                      ProtobufCBuffer     *buffer);
Action__Command *
       action__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   action__command__free_unpacked
                     (Action__Command *message,
                      ProtobufCAllocator *allocator);
/* Action__Vector3D methods */
void   action__vector3_d__init
                     (Action__Vector3D         *message);
size_t action__vector3_d__get_packed_size
                     (const Action__Vector3D   *message);
size_t action__vector3_d__pack
                     (const Action__Vector3D   *message,
                      uint8_t             *out);
size_t action__vector3_d__pack_to_buffer
                     (const Action__Vector3D   *message,
                      ProtobufCBuffer     *buffer);
Action__Vector3D *
       action__vector3_d__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   action__vector3_d__free_unpacked
                     (Action__Vector3D *message,
                      ProtobufCAllocator *allocator);
/* Action__Vector2D methods */
void   action__vector2_d__init
                     (Action__Vector2D         *message);
size_t action__vector2_d__get_packed_size
                     (const Action__Vector2D   *message);
size_t action__vector2_d__pack
                     (const Action__Vector2D   *message,
                      uint8_t             *out);
size_t action__vector2_d__pack_to_buffer
                     (const Action__Vector2D   *message,
                      ProtobufCBuffer     *buffer);
Action__Vector2D *
       action__vector2_d__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   action__vector2_d__free_unpacked
                     (Action__Vector2D *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Action__Command_Closure)
                 (const Action__Command *message,
                  void *closure_data);
typedef void (*Action__Vector3D_Closure)
                 (const Action__Vector3D *message,
                  void *closure_data);
typedef void (*Action__Vector2D_Closure)
                 (const Action__Vector2D *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    action__action_type__descriptor;
extern const ProtobufCMessageDescriptor action__command__descriptor;
extern const ProtobufCMessageDescriptor action__vector3_d__descriptor;
extern const ProtobufCMessageDescriptor action__vector2_d__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_robot_5faction_2eproto__INCLUDED */
