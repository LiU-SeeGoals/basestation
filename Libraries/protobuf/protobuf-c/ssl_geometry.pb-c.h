/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ssl_geometry.proto */

#ifndef PROTOBUF_C_ssl_5fgeometry_2eproto__INCLUDED
#define PROTOBUF_C_ssl_5fgeometry_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Vector2f Vector2f;
typedef struct _SSLFieldLineSegment SSLFieldLineSegment;
typedef struct _SSLFieldCircularArc SSLFieldCircularArc;
typedef struct _SSLGeometryFieldSize SSLGeometryFieldSize;
typedef struct _SSLGeometryCameraCalibration SSLGeometryCameraCalibration;
typedef struct _SSLBallModelStraightTwoPhase SSLBallModelStraightTwoPhase;
typedef struct _SSLBallModelChipFixedLoss SSLBallModelChipFixedLoss;
typedef struct _SSLGeometryModels SSLGeometryModels;
typedef struct _SSLGeometryData SSLGeometryData;


/* --- enums --- */

typedef enum _SSLFieldShapeType {
  SSL__FIELD_SHAPE_TYPE__Undefined = 0,
  SSL__FIELD_SHAPE_TYPE__CenterCircle = 1,
  SSL__FIELD_SHAPE_TYPE__TopTouchLine = 2,
  SSL__FIELD_SHAPE_TYPE__BottomTouchLine = 3,
  SSL__FIELD_SHAPE_TYPE__LeftGoalLine = 4,
  SSL__FIELD_SHAPE_TYPE__RightGoalLine = 5,
  SSL__FIELD_SHAPE_TYPE__HalfwayLine = 6,
  SSL__FIELD_SHAPE_TYPE__CenterLine = 7,
  SSL__FIELD_SHAPE_TYPE__LeftPenaltyStretch = 8,
  SSL__FIELD_SHAPE_TYPE__RightPenaltyStretch = 9,
  SSL__FIELD_SHAPE_TYPE__LeftFieldLeftPenaltyStretch = 10,
  SSL__FIELD_SHAPE_TYPE__LeftFieldRightPenaltyStretch = 11,
  SSL__FIELD_SHAPE_TYPE__RightFieldLeftPenaltyStretch = 12,
  SSL__FIELD_SHAPE_TYPE__RightFieldRightPenaltyStretch = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SSL__FIELD_SHAPE_TYPE)
} SSLFieldShapeType;

/* --- messages --- */

/*
 * A 2D float vector.
 */
struct  _Vector2f
{
  ProtobufCMessage base;
  /*
   * X-coordinate in mm
   */
  float x;
  /*
   * Y-coordinate in mm
   */
  float y;
};
#define VECTOR2F__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vector2f__descriptor) \
    , 0, 0 }


/*
 * Represents a field marking as a line segment represented by a start point p1,
 * and end point p2, and a line thickness. The start and end points are along
 * the center of the line, so the thickness of the line extends by thickness / 2
 * on either side of the line.
 */
struct  _SSLFieldLineSegment
{
  ProtobufCMessage base;
  /*
   * Name of this field marking.
   */
  char *name;
  /*
   * Start point of the line segment.
   */
  Vector2f *p1;
  /*
   * End point of the line segment.
   */
  Vector2f *p2;
  /*
   * Thickness of the line segment.
   */
  float thickness;
  /*
   * The type of this shape
   */
  protobuf_c_boolean has_type;
  SSLFieldShapeType type;
};
#define SSL__FIELD_LINE_SEGMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__field_line_segment__descriptor) \
    , NULL, NULL, NULL, 0, 0, SSL__FIELD_SHAPE_TYPE__Undefined }


/*
 * Represents a field marking as a circular arc segment represented by center point, a
 * start angle, an end angle, and an arc thickness.
 */
struct  _SSLFieldCircularArc
{
  ProtobufCMessage base;
  /*
   * Name of this field marking.
   */
  char *name;
  /*
   * Center point of the circular arc.
   */
  Vector2f *center;
  /*
   * Radius of the arc.
   */
  float radius;
  /*
   * Start angle in counter-clockwise order.
   */
  float a1;
  /*
   * End angle in counter-clockwise order.
   */
  float a2;
  /*
   * Thickness of the arc.
   */
  float thickness;
  /*
   * The type of this shape
   */
  protobuf_c_boolean has_type;
  SSLFieldShapeType type;
};
#define SSL__FIELD_CIRCULAR_ARC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__field_circular_arc__descriptor) \
    , NULL, NULL, 0, 0, 0, 0, 0, SSL__FIELD_SHAPE_TYPE__Undefined }


struct  _SSLGeometryFieldSize
{
  ProtobufCMessage base;
  /*
   * Field length (distance between goal lines) in mm
   */
  int32_t field_length;
  /*
   * Field width (distance between touch lines) in mm
   */
  int32_t field_width;
  /*
   * Goal width (distance between inner edges of goal posts) in mm
   */
  int32_t goal_width;
  /*
   * Goal depth (distance from outer goal line edge to inner goal back) in mm
   */
  int32_t goal_depth;
  /*
   * Boundary width (distance from touch/goal line centers to boundary walls) in mm
   */
  int32_t boundary_width;
  /*
   * Generated line segments based on the other parameters 
   */
  size_t n_field_lines;
  SSLFieldLineSegment **field_lines;
  /*
   * Generated circular arcs based on the other parameters
   */
  size_t n_field_arcs;
  SSLFieldCircularArc **field_arcs;
  /*
   * Depth of the penalty/defense area (measured between line centers) in mm
   */
  protobuf_c_boolean has_penalty_area_depth;
  int32_t penalty_area_depth;
  /*
   * Width of the penalty/defense area (measured between line centers) in mm
   */
  protobuf_c_boolean has_penalty_area_width;
  int32_t penalty_area_width;
  /*
   * Radius of the center circle (measured between line centers) in mm
   */
  protobuf_c_boolean has_center_circle_radius;
  int32_t center_circle_radius;
  /*
   * Thickness/width of the lines on the field in mm
   */
  protobuf_c_boolean has_line_thickness;
  int32_t line_thickness;
  /*
   * Distance between the goal center and the center of the penalty mark in mm 
   */
  protobuf_c_boolean has_goal_center_to_penalty_mark;
  int32_t goal_center_to_penalty_mark;
  /*
   * Goal height in mm
   */
  protobuf_c_boolean has_goal_height;
  int32_t goal_height;
  /*
   * Ball radius in mm (note that this is a float type to represent sub-mm precision)
   */
  protobuf_c_boolean has_ball_radius;
  float ball_radius;
  /*
   * Max allowed robot radius in mm (note that this is a float type to represent sub-mm precision)
   */
  protobuf_c_boolean has_max_robot_radius;
  float max_robot_radius;
};
#define SSL__GEOMETRY_FIELD_SIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__geometry_field_size__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SSLGeometryCameraCalibration
{
  ProtobufCMessage base;
  uint32_t camera_id;
  float focal_length;
  float principal_point_x;
  float principal_point_y;
  float distortion;
  float q0;
  float q1;
  float q2;
  float q3;
  float tx;
  float ty;
  float tz;
  protobuf_c_boolean has_derived_camera_world_tx;
  float derived_camera_world_tx;
  protobuf_c_boolean has_derived_camera_world_ty;
  float derived_camera_world_ty;
  protobuf_c_boolean has_derived_camera_world_tz;
  float derived_camera_world_tz;
  protobuf_c_boolean has_pixel_image_width;
  uint32_t pixel_image_width;
  protobuf_c_boolean has_pixel_image_height;
  uint32_t pixel_image_height;
};
#define SSL__GEOMETRY_CAMERA_CALIBRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__geometry_camera_calibration__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Two-Phase model for straight-kicked balls.
 * There are two phases with different accelerations during the ball kicks:
 * 1. Sliding
 * 2. Rolling
 * The full model is described in the TDP of ER-Force from 2016, which can be found here:
 * https://ssl.robocup.org/wp-content/uploads/2019/01/2016_ETDP_ER-Force.pdf
 */
struct  _SSLBallModelStraightTwoPhase
{
  ProtobufCMessage base;
  /*
   * Ball sliding acceleration [m/s^2] (should be negative)
   */
  double acc_slide;
  /*
   * Ball rolling acceleration [m/s^2] (should be negative)
   */
  double acc_roll;
  /*
   * Fraction of the initial velocity where the ball starts to roll
   */
  double k_switch;
};
#define SSL__BALL_MODEL_STRAIGHT_TWO_PHASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__ball_model_straight_two_phase__descriptor) \
    , 0, 0, 0 }


/*
 * Fixed-Loss model for chipped balls.
 * Uses fixed damping factors for xy and z direction per hop.
 */
struct  _SSLBallModelChipFixedLoss
{
  ProtobufCMessage base;
  /*
   * Chip kick velocity damping factor in XY direction for the first hop
   */
  double damping_xy_first_hop;
  /*
   * Chip kick velocity damping factor in XY direction for all following hops
   */
  double damping_xy_other_hops;
  /*
   * Chip kick velocity damping factor in Z direction for all hops
   */
  double damping_z;
};
#define SSL__BALL_MODEL_CHIP_FIXED_LOSS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__ball_model_chip_fixed_loss__descriptor) \
    , 0, 0, 0 }


struct  _SSLGeometryModels
{
  ProtobufCMessage base;
  SSLBallModelStraightTwoPhase *straight_two_phase;
  SSLBallModelChipFixedLoss *chip_fixed_loss;
};
#define SSL__GEOMETRY_MODELS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__geometry_models__descriptor) \
    , NULL, NULL }


struct  _SSLGeometryData
{
  ProtobufCMessage base;
  SSLGeometryFieldSize *field;
  size_t n_calib;
  SSLGeometryCameraCalibration **calib;
  SSLGeometryModels *models;
};
#define SSL__GEOMETRY_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssl__geometry_data__descriptor) \
    , NULL, 0,NULL, NULL }


/* Vector2f methods */
void   vector2f__init
                     (Vector2f         *message);
size_t vector2f__get_packed_size
                     (const Vector2f   *message);
size_t vector2f__pack
                     (const Vector2f   *message,
                      uint8_t             *out);
size_t vector2f__pack_to_buffer
                     (const Vector2f   *message,
                      ProtobufCBuffer     *buffer);
Vector2f *
       vector2f__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vector2f__free_unpacked
                     (Vector2f *message,
                      ProtobufCAllocator *allocator);
/* SSLFieldLineSegment methods */
void   ssl__field_line_segment__init
                     (SSLFieldLineSegment         *message);
size_t ssl__field_line_segment__get_packed_size
                     (const SSLFieldLineSegment   *message);
size_t ssl__field_line_segment__pack
                     (const SSLFieldLineSegment   *message,
                      uint8_t             *out);
size_t ssl__field_line_segment__pack_to_buffer
                     (const SSLFieldLineSegment   *message,
                      ProtobufCBuffer     *buffer);
SSLFieldLineSegment *
       ssl__field_line_segment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__field_line_segment__free_unpacked
                     (SSLFieldLineSegment *message,
                      ProtobufCAllocator *allocator);
/* SSLFieldCircularArc methods */
void   ssl__field_circular_arc__init
                     (SSLFieldCircularArc         *message);
size_t ssl__field_circular_arc__get_packed_size
                     (const SSLFieldCircularArc   *message);
size_t ssl__field_circular_arc__pack
                     (const SSLFieldCircularArc   *message,
                      uint8_t             *out);
size_t ssl__field_circular_arc__pack_to_buffer
                     (const SSLFieldCircularArc   *message,
                      ProtobufCBuffer     *buffer);
SSLFieldCircularArc *
       ssl__field_circular_arc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__field_circular_arc__free_unpacked
                     (SSLFieldCircularArc *message,
                      ProtobufCAllocator *allocator);
/* SSLGeometryFieldSize methods */
void   ssl__geometry_field_size__init
                     (SSLGeometryFieldSize         *message);
size_t ssl__geometry_field_size__get_packed_size
                     (const SSLGeometryFieldSize   *message);
size_t ssl__geometry_field_size__pack
                     (const SSLGeometryFieldSize   *message,
                      uint8_t             *out);
size_t ssl__geometry_field_size__pack_to_buffer
                     (const SSLGeometryFieldSize   *message,
                      ProtobufCBuffer     *buffer);
SSLGeometryFieldSize *
       ssl__geometry_field_size__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__geometry_field_size__free_unpacked
                     (SSLGeometryFieldSize *message,
                      ProtobufCAllocator *allocator);
/* SSLGeometryCameraCalibration methods */
void   ssl__geometry_camera_calibration__init
                     (SSLGeometryCameraCalibration         *message);
size_t ssl__geometry_camera_calibration__get_packed_size
                     (const SSLGeometryCameraCalibration   *message);
size_t ssl__geometry_camera_calibration__pack
                     (const SSLGeometryCameraCalibration   *message,
                      uint8_t             *out);
size_t ssl__geometry_camera_calibration__pack_to_buffer
                     (const SSLGeometryCameraCalibration   *message,
                      ProtobufCBuffer     *buffer);
SSLGeometryCameraCalibration *
       ssl__geometry_camera_calibration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__geometry_camera_calibration__free_unpacked
                     (SSLGeometryCameraCalibration *message,
                      ProtobufCAllocator *allocator);
/* SSLBallModelStraightTwoPhase methods */
void   ssl__ball_model_straight_two_phase__init
                     (SSLBallModelStraightTwoPhase         *message);
size_t ssl__ball_model_straight_two_phase__get_packed_size
                     (const SSLBallModelStraightTwoPhase   *message);
size_t ssl__ball_model_straight_two_phase__pack
                     (const SSLBallModelStraightTwoPhase   *message,
                      uint8_t             *out);
size_t ssl__ball_model_straight_two_phase__pack_to_buffer
                     (const SSLBallModelStraightTwoPhase   *message,
                      ProtobufCBuffer     *buffer);
SSLBallModelStraightTwoPhase *
       ssl__ball_model_straight_two_phase__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__ball_model_straight_two_phase__free_unpacked
                     (SSLBallModelStraightTwoPhase *message,
                      ProtobufCAllocator *allocator);
/* SSLBallModelChipFixedLoss methods */
void   ssl__ball_model_chip_fixed_loss__init
                     (SSLBallModelChipFixedLoss         *message);
size_t ssl__ball_model_chip_fixed_loss__get_packed_size
                     (const SSLBallModelChipFixedLoss   *message);
size_t ssl__ball_model_chip_fixed_loss__pack
                     (const SSLBallModelChipFixedLoss   *message,
                      uint8_t             *out);
size_t ssl__ball_model_chip_fixed_loss__pack_to_buffer
                     (const SSLBallModelChipFixedLoss   *message,
                      ProtobufCBuffer     *buffer);
SSLBallModelChipFixedLoss *
       ssl__ball_model_chip_fixed_loss__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__ball_model_chip_fixed_loss__free_unpacked
                     (SSLBallModelChipFixedLoss *message,
                      ProtobufCAllocator *allocator);
/* SSLGeometryModels methods */
void   ssl__geometry_models__init
                     (SSLGeometryModels         *message);
size_t ssl__geometry_models__get_packed_size
                     (const SSLGeometryModels   *message);
size_t ssl__geometry_models__pack
                     (const SSLGeometryModels   *message,
                      uint8_t             *out);
size_t ssl__geometry_models__pack_to_buffer
                     (const SSLGeometryModels   *message,
                      ProtobufCBuffer     *buffer);
SSLGeometryModels *
       ssl__geometry_models__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__geometry_models__free_unpacked
                     (SSLGeometryModels *message,
                      ProtobufCAllocator *allocator);
/* SSLGeometryData methods */
void   ssl__geometry_data__init
                     (SSLGeometryData         *message);
size_t ssl__geometry_data__get_packed_size
                     (const SSLGeometryData   *message);
size_t ssl__geometry_data__pack
                     (const SSLGeometryData   *message,
                      uint8_t             *out);
size_t ssl__geometry_data__pack_to_buffer
                     (const SSLGeometryData   *message,
                      ProtobufCBuffer     *buffer);
SSLGeometryData *
       ssl__geometry_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssl__geometry_data__free_unpacked
                     (SSLGeometryData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Vector2f_Closure)
                 (const Vector2f *message,
                  void *closure_data);
typedef void (*SSLFieldLineSegment_Closure)
                 (const SSLFieldLineSegment *message,
                  void *closure_data);
typedef void (*SSLFieldCircularArc_Closure)
                 (const SSLFieldCircularArc *message,
                  void *closure_data);
typedef void (*SSLGeometryFieldSize_Closure)
                 (const SSLGeometryFieldSize *message,
                  void *closure_data);
typedef void (*SSLGeometryCameraCalibration_Closure)
                 (const SSLGeometryCameraCalibration *message,
                  void *closure_data);
typedef void (*SSLBallModelStraightTwoPhase_Closure)
                 (const SSLBallModelStraightTwoPhase *message,
                  void *closure_data);
typedef void (*SSLBallModelChipFixedLoss_Closure)
                 (const SSLBallModelChipFixedLoss *message,
                  void *closure_data);
typedef void (*SSLGeometryModels_Closure)
                 (const SSLGeometryModels *message,
                  void *closure_data);
typedef void (*SSLGeometryData_Closure)
                 (const SSLGeometryData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ssl__field_shape_type__descriptor;
extern const ProtobufCMessageDescriptor vector2f__descriptor;
extern const ProtobufCMessageDescriptor ssl__field_line_segment__descriptor;
extern const ProtobufCMessageDescriptor ssl__field_circular_arc__descriptor;
extern const ProtobufCMessageDescriptor ssl__geometry_field_size__descriptor;
extern const ProtobufCMessageDescriptor ssl__geometry_camera_calibration__descriptor;
extern const ProtobufCMessageDescriptor ssl__ball_model_straight_two_phase__descriptor;
extern const ProtobufCMessageDescriptor ssl__ball_model_chip_fixed_loss__descriptor;
extern const ProtobufCMessageDescriptor ssl__geometry_models__descriptor;
extern const ProtobufCMessageDescriptor ssl__geometry_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ssl_5fgeometry_2eproto__INCLUDED */
