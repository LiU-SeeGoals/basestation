/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ssl_wrapper_tracked.proto */

#ifndef PROTOBUF_C_ssl_5fwrapper_5ftracked_2eproto__INCLUDED
#define PROTOBUF_C_ssl_5fwrapper_5ftracked_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ssl_detection_tracked.pb-c.h"

typedef struct TrackerWrapperPacket TrackerWrapperPacket;


/* --- enums --- */


/* --- messages --- */

/*
 * A wrapper packet containing meta data of the source
 * Also serves for the possibility to extend the protocol later
 */
struct  TrackerWrapperPacket
{
  ProtobufCMessage base;
  /*
   * A random UUID of the source that is kept constant at the source while
   * running If multiple sources are broadcasting to the same network, this id
   * can be used to identify individual sources
   */
  char *uuid;
  /*
   * The name of the source software that is producing this messages.
   */
  char *source_name;
  /*
   * The tracked frame
   */
  TrackedFrame *tracked_frame;
};
#define TRACKER_WRAPPER_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracker_wrapper_packet__descriptor) \
    , NULL, NULL, NULL }


/* TrackerWrapperPacket methods */
void   tracker_wrapper_packet__init
                     (TrackerWrapperPacket         *message);
size_t tracker_wrapper_packet__get_packed_size
                     (const TrackerWrapperPacket   *message);
size_t tracker_wrapper_packet__pack
                     (const TrackerWrapperPacket   *message,
                      uint8_t             *out);
size_t tracker_wrapper_packet__pack_to_buffer
                     (const TrackerWrapperPacket   *message,
                      ProtobufCBuffer     *buffer);
TrackerWrapperPacket *
       tracker_wrapper_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tracker_wrapper_packet__free_unpacked
                     (TrackerWrapperPacket *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TrackerWrapperPacket_Closure)
                 (const TrackerWrapperPacket *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tracker_wrapper_packet__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ssl_5fwrapper_5ftracked_2eproto__INCLUDED */
